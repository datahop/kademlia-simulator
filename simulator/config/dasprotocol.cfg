# ::::::::::::::::::::::::::::::::::::::::::::::::::::::
# :: Kademlia Default Configuration
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::

# ::::: GLOBAL ::::::

# Network size
SIZE 1000

# Random seed
K 5

MINDELAY  5
MAXDELAY  100

#Simulation time in ms
SIM_TIME 1000*60*10


#Traffic generator is executed every TRAFFIC_STEP
TRAFFIC_STEP  12000 #10000000/SIZE
#Tracing module is executed every OBSERVER_STEP
OBSERVER_STEP 20000
#Turbulence module is executed every TURBULENCE_STEP enabling churning
TURBULENCE_STEP  1000
TURBULENCE_STEP_NONVAL  1000
REFRESH_STEP 1000

# add network config parameters to simulation
random.seed 24680
simulation.experiments 1
simulation.endtime SIM_TIME
network.size SIZE


# Peersim  protocols enabled in each node

#A protocol that stores links. It does nothing apart from that. Use by default
protocol.0link peersim.core.IdleProtocol

#A protocol that stores links. It does nothing apart from that. Use by default
protocol.1pairwiselattr peersim.transport.PairwiseFixedLatencyTransport
protocol.1pairwiselattr.mindelay MINDELAY
protocol.1pairwiselattr.maxdelay MAXDELAY
protocol.1pairwiselattr.size SIZE


#transport layer that reliably delivers messages with a random delay, emulating TCP
protocol.2unreltr peersim.transport.UnreliableTransport
protocol.2unreltr.drop 0
protocol.2unreltr.transport 1pairwiselattr

#Kademlia protocol with 256 bits identifiers and 17 buckets in the routing table.
#Use FINDMODE 1 to send FINDMODE messages looking for distance to specific node instead of sending the id of the node like in DEVP2P
protocol.3kademlia peersim.kademlia.KademliaProtocol
protocol.3kademlia.transport 2unreltr
protocol.3kademlia.BITS 256
protocol.3kademlia.NBUCKETS 17
protocol.3kademlia.FINDMODE 1

#Kademlia protocol with 256 bits identifiers and 17 buckets in the routing table.
#Use FINDMODE 1 to send FINDMODE messages looking for distance to specific node instead of sending the id of the node like in DEVP2P
protocol.4dasprotocol peersim.kademlia.das.DASProtocolBuilder
protocol.4dasprotocol.transport 2unreltr
protocol.4dasprotocol.kademlia 3kademlia

protocol.5dasprotocol peersim.kademlia.das.DASProtocolValidator
protocol.5dasprotocol.transport 2unreltr
protocol.5dasprotocol.kademlia 3kademlia

protocol.6dasprotocol peersim.kademlia.das.DASProtocolNonValidator
protocol.6dasprotocol.transport 2unreltr
protocol.6dasprotocol.kademlia 3kademlia

protocol.7evildasprotocol peersim.kademlia.das.EvilDASProtocol
protocol.7evildasprotocol.transport 2unreltr
protocol.7evildasprotocol.kademlia 3kademlia

# ::::: INITIALIZERS :::::
#Class that initializes nodes with kademlia protocol and generates uniform ids
init.1uniqueNodeID peersim.kademlia.das.CustomDistributionDas
init.1uniqueNodeID.protocolkad 3kademlia
init.1uniqueNodeID.protocoldasbuilder 4dasprotocol
init.1uniqueNodeID.protocoldasvalidator 5dasprotocol
init.1uniqueNodeID.protocoldasnonvalidator 6dasprotocol
init.1uniqueNodeID.protocolEvildas 7evildasprotocol
init.1uniqueNodeID.validator_rate 1.0
init.1uniqueNodeID.evilNodeRatioValidator 0.0
init.1uniqueNodeID.evilNodeRatioNonValidator 0.0


#Adds initial state to the routing tables
init.2statebuilder peersim.kademlia.StateBuilder
init.2statebuilder.protocol 3kademlia
init.2statebuilder.transport 2unreltr

# ::::: CONTROLS :::::

#TrafficGenerator class sends and initial 
control.0traffic peersim.kademlia.das.TrafficGeneratorSample
control.0traffic.step TRAFFIC_STEP
control.0traffic.mapping_fn 2
control.0traffic.sample_copy_per_node 2
control.0traffic.block_dim_size 100
control.0traffic.num_samples 75
control.0traffic.kadprotocol 3kademlia

#TrafficGenerator class sends and initial 
control.1refresh peersim.kademlia.das.RefreshSearchTable
control.1refresh.step REFRESH_STEP

# turbulence non-validator
#control.2turbolenceAdd peersim.kademlia.das.TurbulenceDas
#control.2turbolenceAdd.protocolkad 3kademlia
#control.2turbolenceAdd.protocoldasbuilder 4dasprotocol
#control.2turbolenceAdd.protocoldasvalidator 5dasprotocol
#control.2turbolenceAdd.protocoldasnonvalidator 6dasprotocol
#control.2turbolenceAdd.protocolEvildas 7evildasprotocol
#control.2turbolenceAdd.transport 2unreltr
#control.2turbolenceAdd.step TURBULENCE_STEP_NONVAL
#control.2turbolenceAdd.p_idle 0.1
#control.2turbolenceAdd.p_rem 0.45
#control.2turbolenceAdd.p_add 0.45

# turbulence validators
control.3turbolenceAdd peersim.kademlia.das.TurbulenceDasValidator
control.3turbolenceAdd.protocolkad 3kademlia
control.3turbolenceAdd.protocoldasbuilder 4dasprotocol
control.3turbolenceAdd.protocoldasvalidator 5dasprotocol
control.3turbolenceAdd.protocoldasnonvalidator 6dasprotocol
control.3turbolenceAdd.protocolEvildas 7evildasprotocol
control.3turbolenceAdd.transport 2unreltr
control.3turbolenceAdd.step TURBULENCE_STEP
control.3turbolenceAdd.p_idle 0.1
control.3turbolenceAdd.p_rem 0.45
control.3turbolenceAdd.p_add 0.45

# ::::: OBSERVER :::::
#The observer is executed every OBSERVER_STEP and will generate data traces 
control.4 peersim.kademlia.KademliaObserver
control.4.protocol 3kademlia
control.4.step OBSERVER_STEP
control.4.logfolder logsDas
