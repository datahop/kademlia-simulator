# ::::::::::::::::::::::::::::::::::::::::::::::::::::::
# :: Kademlia Default Configuration
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::

# ::::: GLOBAL ::::::

# Network size
SIZE 5000

# Random seed
K 5

MINDELAY  10
MAXDELAY  200

#Simulation time in ms
SIM_TIME 1000*60*60

#Traffic generator is executed every TRAFFIC_STEP
TRAFFIC_STEP  300000 #10000000/SIZE
#Tracing module is executed every OBSERVER_STEP
OBSERVER_STEP 100000
#Turbulence module is executed every TURBULENCE_STEP enabling churning
TURBULENCE_STEP  (SIM_TIME*20)/SIZE   #100000000/SIZE


# add network config parameters to simulation
random.seed 24680
simulation.experiments 1
simulation.endtime SIM_TIME
network.size SIZE


# Peersim  protocols enabled in each node

#A protocol that stores links. It does nothing apart from that. Use by default
protocol.0link peersim.core.IdleProtocol

#A protocol that stores links. It does nothing apart from that. Use by default
protocol.1uniftr peersim.transport.UniformRandomTransport
protocol.1uniftr.mindelay MINDELAY
protocol.1uniftr.maxdelay MAXDELAY

#transport layer that reliably delivers messages with a random delay, emulating TCP
protocol.2unreltr peersim.transport.UnreliableTransport
protocol.2unreltr.drop 0
protocol.2unreltr.transport 1uniftr

#Kademlia protocol with 256 bits identifiers and 17 buckets in the routing table.
#Use FINDMODE 1 to send FINDMODE messages looking for distance to specific node instead of sending the id of the node like in DEVP2P
protocol.3kademlia peersim.kademlia.KademliaProtocol
protocol.3kademlia.transport 2unreltr
protocol.3kademlia.BITS 256
protocol.3kademlia.NBUCKETS 17
protocol.3kademlia.FINDMODE 1

#Kademlia protocol with 256 bits identifiers and 17 buckets in the routing table.
#Use FINDMODE 1 to send FINDMODE messages looking for distance to specific node instead of sending the id of the node like in DEVP2P
protocol.4dasprotocol peersim.kademlia.das.DASProtocol
protocol.4dasprotocol.transport 2unreltr
protocol.4dasprotocol.kademlia 3kademlia

protocol.5evildasprotocol peersim.kademlia.das.EvilDASProtocol
protocol.5evildasprotocol.transport 2unreltr
protocol.5evildasprotocol.kademlia 3kademlia
#init.1uniqueNodeID.protocolEvildas 5evildasprotocol

# ::::: INITIALIZERS :::::
#Class that initializes nodes with kademlia protocol and generates uniform ids
init.1uniqueNodeID peersim.kademlia.das.CustomDistributionDas
init.1uniqueNodeID.protocolkad 3kademlia
init.1uniqueNodeID.protocoldas 4dasprotocol
init.1uniqueNodeID.validator_rate 0.5
init.1uniqueNodeID.evilNodeRatio 0.5
init.1uniqueNodeID.protocolEvildas 5evildasprotocol


#Adds initial state to the routing tables
init.2statebuilder peersim.kademlia.StateBuilder
init.2statebuilder.protocol 3kademlia
init.2statebuilder.transport 2unreltr

# ::::: CONTROLS :::::

#TrafficGenerator class sends and initial 
control.0traffic peersim.kademlia.das.TrafficGeneratorSample
control.0traffic.kadprotocol 3kademlia
control.0traffic.dasprotocol 4dasprotocol
control.0traffic.step TRAFFIC_STEP
control.0traffic.mapping_fn 2
control.0traffic.sample_copy_per_node 2
control.0traffic.block_dim_size 512

# turbulence
#control.2turbolenceAdd peersim.kademlia.Turbulence
#control.2turbolenceAdd.protocol 3kademlia
#control.2turbolenceAdd.transport 2unreltr
#control.2turbolenceAdd.step TURBULENCE_STEP
#control.2turbolenceAdd.p_idle 0.5
#control.2turbolenceAdd.p_rem 0.25
#control.2turbolenceAdd.p_add 0.25

# ::::: OBSERVER :::::
#The observer is executed every OBSERVER_STEP and will generate data traces 
control.3 peersim.kademlia.KademliaObserver
control.3.protocol 3kademlia
control.3.step OBSERVER_STEP
control.3.logfolder logs
