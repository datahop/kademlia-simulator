# ::::::::::::::::::::::::::::::::::::::::::::::::::::::
# :: Kademlia Default Configuration
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::

# ::::: GLOBAL ::::::

# Network size
SIZE 5000

# Random seed
K 5

MINDELAY  100
MAXDELAY  100

#Simulation time in ms
SIM_TIME 1000*60*14

#Traffic generator is executed every TRAFFIC_STEP
TRAFFIC_STEP  300000 #10000000/SIZE
#Tracing module is executed every OBSERVER_STEP
OBSERVER_STEP 100000
#Turbulence module is executed every TURBULENCE_STEP enabling churning
TURBULENCE_STEP  (SIM_TIME*20)/SIZE   #100000000/SIZE

HEARTBEAT_STEP 6000

# add network config parameters to simulation
random.seed 24680
simulation.experiments 1
simulation.endtime SIM_TIME
network.size SIZE


# Peersim  protocols enabled in each node

#A protocol that stores links. It does nothing apart from that. Use by default
protocol.0link peersim.core.IdleProtocol

#A protocol that stores links. It does nothing apart from that. Use by default
protocol.1uniftr peersim.transport.UniformRandomTransport
protocol.1uniftr.mindelay MINDELAY
protocol.1uniftr.maxdelay MAXDELAY

#transport layer that reliably delivers messages with a random delay, emulating TCP
protocol.2unreltr peersim.transport.UnreliableTransport
protocol.2unreltr.drop 0
protocol.2unreltr.transport 1uniftr

#Kademlia protocol with 256 bits identifiers and 17 buckets in the routing table.
#Use FINDMODE 1 to send FINDMODE messages looking for distance to specific node instead of sending the id of the node like in DEVP2P
protocol.3dasprotocol peersim.gossipsub.GossipSubDasBuilder
protocol.3dasprotocol.transport 2unreltr
protocol.3dasprotocol.heartbeat HEARTBEAT_STEP

protocol.4dasprotocol peersim.gossipsub.GossipSubDasValidator
protocol.4dasprotocol.transport 2unreltr
protocol.4dasprotocol.heartbeat HEARTBEAT_STEP

protocol.5dasprotocol peersim.gossipsub.GossipSubDasNonValidator
protocol.5dasprotocol.transport 2unreltr
protocol.5dasprotocol.heartbeat HEARTBEAT_STEP

protocol.6evildasprotocol peersim.gossipsub.GossipSubDasValidator
protocol.6evildasprotocol.transport 2unreltr
protocol.6evildasprotocol.heartbeat HEARTBEAT_STEP


# ::::: INITIALIZERS :::::
#Class that initializes nodes with kademlia protocol and generates uniform ids
init.1uniqueNodeID peersim.gossipsub.CustomDistributionDas
init.1uniqueNodeID.protocoldasbuilder 3dasprotocol
init.1uniqueNodeID.protocoldasvalidator 4dasprotocol
init.1uniqueNodeID.protocoldasnonvalidator 5dasprotocol
init.1uniqueNodeID.protocolEvildas 6evildasprotocol
init.1uniqueNodeID.validator_rate 0.5
init.1uniqueNodeID.evilNodeRatioValidator 0.0
init.1uniqueNodeID.evilNodeRatioNonValidator 0.0
# ::::: CONTROLS :::::

#TrafficGenerator class sends and initial 
control.0traffic peersim.gossipsub.TrafficGenerator
control.0traffic.block_dim_size 512
control.0traffic.step TRAFFIC_STEP

control.1protocol peersim.gossipsub.GossipHeartBeat
#control.1protocol.protocol 3dasprotocol
control.1protocol.step HEARTBEAT_STEP

# turbulence
#control.2turbolenceAdd peersim.kademlia.Turbulence
#control.2turbolenceAdd.protocol 3kademlia
#control.2turbolenceAdd.transport 2unreltr
#control.2turbolenceAdd.step TURBULENCE_STEP
#control.2turbolenceAdd.p_idle 0.5
#control.2turbolenceAdd.p_rem 0.25
#control.2turbolenceAdd.p_add 0.25

# ::::: OBSERVER :::::
#The observer is executed every OBSERVER_STEP and will generate data traces 
control.3 peersim.gossipsub.GossipObserver
control.3.protocol 3gossipsub
control.3.step OBSERVER_STEP
control.3.logfolder logsGossipTest
